<?php

define('SPOT', 10);
define('MIS', -1);

function motor_menu() {

  $items['game'] = array(
    'title' => 'Game',
    'page callback' => 'motor_game',
    'page arguments' => array(1),
    'access callback' => '_motor_user_has_role',
    'access arguments' => array(array('authenticated user')),
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['reset-game'] = array(
    'title' => 'Reset game',
    'page callback' => 'motor_reset_game',
    'access arguments' => array('administer modules'),
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'motor_dasboard',
    'access arguments' => array('administer modules'),
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['result-list'] = array(
    'title' => 'Result list',
    'page callback' => 'motor_result_list',
    'page arguments' => array(2),
    'access callback' => '_motor_user_has_role',
    'access arguments' => array(array('authenticated user')),
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['ajax/spot'] = array(
    'title' => 'import data',
    'page callback' => 'motor_ajax_callable_spot',
    'page arguments' => array(2,3,4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ajax/savetime'] = array(
    'title' => 'savetime',
    'page callback' => 'motor_ajax_callable_savetime',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ajax/gettime'] = array(
    'title' => 'gettime',
    'page callback' => 'motor_ajax_callable_gettime',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ajax/setspots'] = array(
    'title' => 'gettime',
    'page callback' => 'motor_ajax_callable_setspots',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ajax/gethint'] = array(
    'title' => 'gethint',
    'page callback' => 'motor_ajax_callable_gethint',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['pause'] = array(
    'title' => 'Pausing game',
    'page callback' => 'motor_pause_game',
    'access callback' => '_motor_user_has_role',
    'access arguments' => array(array('authenticated user')),
    'type' => MENU_CALLBACK,
  );

  
  return $items;
}

function _motor_user_has_role($roles) {
  if (user_is_logged_in()) {
    global $user;
    if (in_array('administrator', $user->roles)) {
      return TRUE;
    }
    foreach ($roles as $role) {
      if (in_array($role, $user->roles)) {
        return TRUE;
      }
    }
  }
  else {
    return FALSE;
  }
}




function motor_form_images_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['js'][] = drupal_get_path('module', 'motor') . '/motor.js';
}

function motor_game($nid) {
  global $user;

  $element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'key',
      'content' => $_SESSION['csrf_token'],
    ),
  );
  drupal_add_html_head($element, 'alapjarat_media');

  $nid = motor_find_actual_game($user->uid);
  if ($nid == -1) {
    drupal_goto('/result-list/finish');
  }

  /*
  $gid = 1;
  $query = db_select('motor_spot_diff', 'm')
    ->fields('m', array('spotted'))
    ->condition('uid', $user->uid)
    ->condition('nid', $gid);
    $result = $query->execute()->fetch();*/

  drupal_add_js(drupal_get_path('module', 'motor') . '/flipclock.min.js');
  drupal_add_css(drupal_get_path('module', 'motor') . '/flipclock.css');

  drupal_add_library('system', 'effects.shake');

  drupal_add_js(drupal_get_path('module', 'motor') . '/game.js');

  $output = '';

  $node = node_load($nid);
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $image1 = $node_wrapper->field_image->value();
  $image2 = $node_wrapper->field_image_b->value();

  $image1_render = theme('image_style',array('style_name' => 'large', 'path' => $image1['uri']));
  $image2_render = theme('image_style',array('style_name' => 'large', 'path' => $image2['uri']));
  
  if ($user->uid == 1) {
    $output .= '<div id="hint">HINT</div>';
  }

  // get initial score
  $user_score = motor_get_user_score($user->uid);
  if (is_null($user_score)) {
    $user_score = 0;
  }

  // get initial found spot num
  $spots = motor_get_spots($nid, $user->uid);
  if (!$spots) {
    $spots = 0;
  } else {
    $spots = count($spots);
  }

  drupal_set_title(''); 

  // Game place
  $output .= '<div id="turn-mobile">Turn your mobile landscape!</div>';
  $output .= '<div id="game-wrapper">';
  $output .= '<div id="game" data-gid="' . $node->nid . '">';
  $output .= '<div id="image-1" class="spot-image">' . $image1_render . '<canvas id="img-1-cnvs" width="480" height="320"></div>';
  $output .= '<div id="image-2" class="spot-image">' . $image2_render . '</div>';
  $output .= '</div>';

  // Game meta info
  $output .= '<div id="game-message"></div>';
  $output .= '<div id="game-clock"></div>';
  $output .= '<div id="game-hint">Get hint!<div id="game-hint-word"></div></div>';
  $output .= '<div id="game-stats">';
  $output .= '<div id="game-result"><span id="spotted-label">' . t('Found:') . ' </span><span id="spotted">' . $spots . '</span> / ' . count($node->field_coordinates[LANGUAGE_NONE]) . '</div>';
  $output .= '<div id="score"><span id="score-label">' . t('Score:') . ' </span>' .$user_score . '</div>';
  $output .= '<div id="pause">' . l('Pause', '/pause') . '</div>';
  $output .= '</div>';
  $output .= '</div>';




  if ($user->uid == 1) {
    $output .= '<div id="dev" style="width: 100%;height: 200px;border:1px solid red;clear:both;"></dev>';
  }

  return $output;
}

function motor_ajax_callable_spot($gid, $x, $y) {
  global $user;

  $x = round($x);
  $y = round($y);
  $points = motor_get_game_coords($gid);
  $spotted = motor_get_spots($gid, $user->uid);

  if ($x == NULL && $y == NULL) {
    drupal_json_output($points);
    drupal_json_output($spotted);
    return 1;
  }

  $score = motor_get_score($gid);

  $coords = [];

  $spot = FALSE;
  $points_count = count($points);

  // Check if spot found.
  for ($c = 0; $c < $points_count; $c++) {
    if ($x >= $points[$c]['x'] && $x <= $points[$c]['x2'] && $y >= $points[$c]['y'] && $y <= $points[$c]['y2']) {
      $spot = TRUE;
      $now_spotted = $c;
    }
  }

  // Spot found.
  if ($spot) {
    if ($spotted === FALSE) {
      $spotlist = [];
    }
    else {
      $spotlist = $spotted;
    }

    if (array_search($now_spotted, $spotlist) === FALSE) {
      $spotlist[] = $now_spotted;
      $finished = 0;
      if (count($spotlist) == $points_count) {
        $finished = 1;
      }

      motor_set_score($gid, $score + 10);
      motor_set_spots($gid, $spotlist, count($points));
      $response = 1;
      $coords = [$points[$now_spotted]['x'], $points[$now_spotted]['y'], $points[$now_spotted]['x2'], $points[$now_spotted]['y2']];  
    } else {
      $response = -1;
    }


  } else {
    motor_set_score($gid, $score - 1);
    $response = 0;
  }

  $score = motor_get_user_score($user->uid);

  drupal_json_output([$response, $score, $coords, count($spotlist)]);
}

function motor_get_game_coords($gid) {
  $node = node_load($gid);
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $coords = $node_wrapper->field_coordinates;

  foreach ($coords as $coord) {
    $parts = explode(':', $coord->value());
    $left_top = explode(',', $parts[0]);
    $width_height = explode(',', $parts[1]);
    $points[] = array(
      'x' => $left_top[0], 
      'y' => $left_top[1],
      'x2' => $width_height[0],
      'y2' => $width_height[1],
    );
  }

  return $points;
}

function motor_ajax_callable_savetime($gid, $time) {
  global $user;

  db_merge('motor_spot_diff')
    ->key(array('uid' => $user->uid, 'nid' => $gid))
    ->fields(array(
        'time' => $time,
    ))
    ->execute();

    print 1;
}

function motor_ajax_callable_gettime($gid) {
  global $user;

  $query = db_select('motor_spot_diff', 'm')
    ->fields('m', array('time'))
    ->condition('uid', $user->uid)
    ->condition('nid', $gid);
    $result = $query->execute()->fetch();

    if (empty($result->time)) {
      print 0;
    } else {
      print $result->time - 1;
    }
}

function motor_get_score($gid) {
  global $user;

  $query = db_select('motor_spot_diff', 'm')
    ->fields('m', array('score'))
    ->condition('uid', $user->uid)
    ->condition('nid', $gid);
    $result = $query->execute()->fetch();

    if (!empty($result->score)) {
      return $result->score;
    }

    return 0;
}

function motor_get_spots($gid, $uid) {
  $query = db_select('motor_spot_diff', 'm')
    ->fields('m', array('spotted'))
    ->condition('uid', $uid)
    ->condition('nid', $gid);
    $result = $query->execute()->fetch();

    if (!empty($result)) {
      return unserialize($result->spotted);
    }

    return FALSE;
}

function motor_set_spots($gid, $spotted, $max) {
  global $user;

  $finished = ($max == count($spotted)) ? 1 : 0;

  db_merge('motor_spot_diff')
    ->key(array('uid' => $user->uid, 'nid' => $gid))
    ->fields(array(
        'spotted' => serialize($spotted),
        'finished' => $finished,
    ))
    ->execute();
}

function motor_ajax_callable_setspots($gid, $hint = FALSE) {
  global $user;

  if ($hint) {
    $coords = motor_get_game_coords($gid);
    drupal_json_output($coords);

    return 1;
  }

  $spotted = motor_get_spots($gid, $user->uid);
  if (!empty($spotted)) {
    $coords = motor_get_game_coords($gid);
    $score = motor_get_score($gid);

    foreach ($spotted as $spot) {
      $result[] = $coords[$spot];
    }

    drupal_json_output(array(
      'spotted' => $result,
      'spotnum' => count($coords),
      'score' => $score,
    ));
  } else {
    drupal_json_output(NULL);
  }
}

function motor_find_actual_game($uid) {

  $query = db_select('motor_spot_diff', 'm')
    ->fields('m', array('nid'))
    ->condition('uid', $uid)
    ->orderBy('nid', 'DESC')
    ->range(0,1);
  $exist = $query->execute()->fetch();

  $query = db_select('motor_spot_diff', 'm')
    ->fields('m', array('nid'))
    ->condition('uid', $uid)
    ->condition('finished', 0)
    ->orderBy('nid', 'DESC')
    ->range(0,1);
  $last = $query->execute()->fetch();

  if (empty($last) && !empty($exist)) {
    $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', 'images')
      ->condition('status', 1)
      ->condition('nid', $exist->nid, '>')
      ->orderBy('nid', 'ASC')
      ->range(0,1);
    $last = $query->execute()->fetch();
  }

  if (empty($exist)) {
    return 1;
  } elseif(empty($last)) {
    return -1;
  } else {
    return $last->nid;
  }
}

function motor_game_get_title($nid) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('nid', $nid);
  $result = $query->execute()->fetch();

  if (!empty($result)) {
    return $result->title;
  }

  return NULL;
}

function motor_set_score($gid, $score) {
  global $user;

  db_merge('motor_spot_diff')
    ->key(array('uid' => $user->uid, 'nid' => $gid))
    ->fields(array(
        'score' => $score,
    ))
    ->execute();
}

function motor_reset_game() {
  global $user;

  db_delete('motor_spot_diff')
  ->condition('uid', $user->uid)
  ->execute();
  return 'Table empty.';
}

function motor_get_user_score($uid) {
  $query = db_select('motor_spot_diff', 'm')
  ->condition('m.uid', $uid);
  $alias = $query->addExpression('SUM(score)', 'sum_score');

  $sumscore = $query->execute()->fetchAll();

  if (!empty($sumscore) && $sumscore[0]->sum_score > 0) {
    return $sumscore[0]->sum_score;
  }

  return NULL;

}

function motor_dasboard() {
  // Get users.
  $query = db_select('users', 'u');
  $query
  ->fields('u', array('name', 'uid'))
  ->condition('u.status', '1', '=')
  ->orderBy('u.uid', 'DESC');
  
  //$query->range(1, 1);
  
  $results = $query->execute()->fetchAll();

  $fields = array('username', 'actual game', 'finished');
  foreach ($results as $result) {
    $gid = motor_find_actual_game($result->uid);
    dpm($result->name . ':' . $gid);
    dpm($result->name . ':' . $gid);
    $row = [];
    $row[] = $result->name;
    $row[] = motor_game_get_title($gid);
    $row[] = ($gid == -1) ? 'finished' : '';
    $rows[] = $row;
  }
  
  $output = theme('table', array(
    'header' => $fields,
    'rows' => $rows,
    'attributes' => array(
      'class' => array('dashboard'),
    ),
  ));

  return $output;
}

function motor_result_list($endgame = FALSE) {
  global $user;

  dpm(motor_get_user_score(8));

  $query = db_query('SELECT o.uid, o.id, o.score, o.time FROM motor_spot_diff o INNER JOIN (SELECT id, max(score) mscore FROM motor_spot_diff GROUP BY uid) m ON m.id = o.id ORDER BY mscore DESC');

  $results = $query->fetchAll();  

  $fields = array('username', 'score', 'time', 'abs');
  foreach ($results as $result) {
    $indicator = (int)(((int)$result->score / $result->time * 100) / 10);

    $account = user_load($result->uid);
    $row = [];
    $row[] = $account->name;
    $row[] = $result->score;
    $row[] = $result->time;
    $row[] = $indicator;
    if ($result->uid == $user->uid) {
      $rows[] = array('data' => $row, 'class' => array('player-one'));
    } else {
      $rows[] = array('data' => $row);  
    }
    
  }
  
  if (!$endgame) {
    $output = array(
      'p1' => array(
        '#type' => 'markup',
        '#markup' => '<div id="finished-message">Congratulation!</div>',
      ),
    );
  }

  $output['p2'] = array(
    '#type' => 'markup',
    '#markup' => theme('table', array(
      'header' => $fields,
      'rows' => $rows,
      'attributes' => array(
        'class' => array('result-list'),
      ),
    )),
  );

  drupal_set_title('');

  return $output;
}

function motor_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'user_profile_form' && $form['#user_category'] == 'account' && $user->uid > 1) {
    $form['account']['mail']['#attributes'] = array('readonly' => 'readonly', 'disabled' => 'disabled');
    $form['picture']['#access'] = FALSE;
  }
}

function motor_pause_game() {

  $output['p0'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="pause-top" class="pause-row">' . l('<< Back to game', '/game', array('attributes' => array('id' => 'back-from-pause'))) . '</div>',
  );


  $output['p1'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="pause-left" class="pause-col"><iframe width="700" height="480" src="https://www.youtube.com/embed/-Td7XwqzeUw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>',
  );

  $articles = motor_get_news();
  foreach ($articles as $article) {
    $cikkek[] = theme('motor_news', array('article' => $article));
    break 1;
  }
  $output['p2'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="pause-right" class="pause-col">' . implode('<br>', $cikkek) . '</div>',
  );

  drupal_set_title('');

  return $output;
}

function motor_get_news($feed_url = 'https://alapjarat.hu/feed') {

  $rss = motor_curl_get_contents($feed_url);
  $rss = simplexml_load_string($rss);
  
  $news = array();
  $c = 0;
  foreach ($rss->channel->item as $item) {
    array_push($news, $item);
    $c++;
  }

  return $news;
}

function motor_curl_get_contents($url) {



    $ch = curl_init($url);
  

  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);

  

  $data = curl_exec($ch);
  $status=curl_getinfo($ch);
  curl_close($ch);

  if($status['http_code'] == 200) {
        return $data;
    }
    elseif($status['http_code']==301 || $status['http_code']==302) {
        if (!$follow_allowed) {
            if (!empty($status['redirect_url'])) {
                $redirURL=$status['redirect_url'];
            } else {
                preg_match('/href\=\"(.*?)\"/si',$data,$m);
                if (!empty($m[1])) {
                    $redirURL=$m[1];
                }
            }
            if(!empty($redirURL)) {
                return  call_user_func( __FUNCTION__, $redirURL, $post_paramtrs);
            }
        }
    }

    return;

}

function motor_theme() {
   return array(
     'motor_news' => array(
       'variables' => array('news' => NULL),
       'template' => 'motor_news',
     ),
   );
}

function motor_ajax_callable_gethint() {
  global $user;
  $nid = motor_find_actual_game($user->uid);

  $spots = motor_get_spots($nid, $user->uid);

  $node = node_load($nid);
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $hints = $node_wrapper->field_hints->value();

  foreach ($spots as $spot) {
    unset($hints[$spot]);
  }

  drupal_json_output(reset($hints));

}